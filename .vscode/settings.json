{
  "testExplorer.mergeSuites": true,
  "mochaExplorer.ui": "qunit",
  "mochaExplorer.files": "tests/**/*.spec.js",
  "mochaExplorer.require": [
    "source-map-support/register"
  ],
  "mochaExplorer.envPath": ".env",
  "mochaExplorer.timeout": 200000,
  "mochaExplorer.nodePath": "/home/gitpod/.nvm/versions/node/v10.23.3/bin/node",
  "mochaExplorer.ignore": [
    ".snowqm/tests/**/node_modules/**/*.*",
    "tests/**/node_modules/**/*.*",
  ],
  "compareFolders.ignoreExtension": [
    "mload",
    "mload.sh"
  ],
  "editor.tokenColorCustomizations": {
    "textMateRules": [
      {
        "scope":["code.block.snowscriptjs"],
        "settings": {
          "foreground": "#d49331fb",
          "fontStyle": ""
        }
      },
      {
        "scope":["keyword.other.sql"],
        "settings": {
          "foreground": "#0a2bc0",
          "fontStyle": "bold"
        }
      },
      {
        "scope":"code.block.snowscriptjs.exec",
        "settings": {
          "foreground": "#1EB6DB",
          "fontStyle": "italic"
        }
      },
      {
        "scope":"code.block.snowscriptjs.cursor",
        "settings": {
          "foreground": "#1EB6DB",
          "fontStyle": "italic"
        }
      },
      {
        "scope":"code.block.snowscriptpy.exec",
        "settings": {
          "foreground": "#1EB6DB",
          "fontStyle": "italic"
        }
      },
      {
        "scope":["keyword.other.create.sql","meta.drop.sql"],
        "settings": {
          "foreground": "#2ec00ac5",
          "fontStyle": "bold"
        }
      },
      {
        "scope":["constant.other.table-name.sql"],
        "settings": {
          "foreground": "#8b008b",
          "fontStyle": "bold"
        }
      },
      {
        "scope":["constant.other.database-name.sql"],
        "settings": {
          "foreground": "#6a9ff0",
          "fontStyle": "bold"
        }
      },
      {
        "scope":["constant.numeric.sql"],
        "settings": {
          "foreground": "#F78c6c",
          "fontStyle": "bold"
        }
      },
      {
        "scope":["keyword.operator.logical.js"],
        "settings": {
          "foreground": "#FF0000",
          "fontStyle": "bold"
        }
      },
      {
        "scope":["meta.brace.square.js"],
        "settings": {
          "foreground": "#6600ee",
          "fontStyle": "bold"
        }
      },
      {
        "scope":["keyword.operator.arithmetic.js"],
        "settings": {
          "foreground": "#FF0000",
          "fontStyle": "bold"
        }
      }
    ]
  },
  "files.exclude": {
    "**/.git": true,
    "**/.svn": true,
    "**/.hg": true,
    "**/CVS": true,
    "**/.DS_Store": true,
    ".snowqm": true,
    "tests/procedure/node_modules": true,
    "tests/procedure/package.json": true,
    "tests/procedure/.npmrc": true,
    "~":true,
    "snowsql_rt.*":true,
    "Source":false,
    "Scripts":false,
    "**/__pycache__":true,
    ".gitignore":false,
    ".gitpod.yml":true,
    "snowflake_python_connector*.*":true,
    ".coveragerc":true,
    "**/.pytest_cache":true,
    "Mobilize*":true,
  },
  "python.dataScience.alwaysTrustNotebooks":true,
  "workbench.iconTheme": "vscode-great-icons",
  "mobilize-codeunderstand.host": "403c9ec2d72c.ngrok.io",
  "mobilize-codeunderstand.hostPort": "80",
  "mobilize-codeunderstand.queries.names": [
      "query1",
      "query2",
      "query3",
      "query4",
      "query5",
  ],
  "mobilize-codeunderstand.queries.descriptions": [
      "Right now not-found databases are called \"<unspecified>\". We can show the DB and its tables with this query",
      "Hot Elements: show a dataset of columns with more reads and writes",
      "Column to be manually selected from VisualStudioCode",
      "Similar Object Detection",
      "Select a script and repeat the same process"
  ],
  "mobilize-codeunderstand.queries.queryText": [
      "MATCH p1=(d:Database {Name:\"$selectedText\"})-->(o:Object) return p1",
      "MATCH (c:Column) OPTIONAL MATCH (a1:Action)-[w]->(c) OPTIONAL MATCH (a2:Action)<-[r]-(c) WITH c, count(w) as writes, count(r) as reads RETURN c.FullName, writes, reads ORDER BY writes DESC, reads DESC",
      "MATCH p1=(x)-[r:DataFlow|:Contains]->(y) Where x:Object or x:Column or x:Database return p1",
      "MATCH p1=(x)-[r:Similarity]->(y) return p1",
      "MATCH p1=(x:Script)-[r:DataFlow]->(y:Script) return p1"
  ],
  "todo-tree.general.tags": [
    "BUG",
    "HACK",
    "FIXME",
    "TODO",
    "** MSC"
  ],
  "pythonTestExplorer.testFramework": "pytest"
}
